	[Instruction]
		Opcode: 
		Mnemonic: 
		Arguments: 
		Description: 
		Errors:

Control Flow
	No Instruction
		Opcode: 0x0000
		Mnemonic: nop
		Arguments: None
		Description: Performs no meaningful operation. Fills space.
		Errors: None
		
	End
		Opcode: 0x0001
		Mnemonic: end
		Arguments: None
		Description: Immediately and permanently halts execution. Used at the end of programs.
		Errors: None
		
	Jump
		Opcode: 0x0002
		Mnemonic: jmp
		Arguments: jmp <address>
			<address>: An addressing block containing the memory address to jump to.
		Description: Sets EIP to the given address + ERP. This moves execution to the given address.
		Errors:
			InvalidAddressType: Raised if the given address block does not point to a memory address.
			AddressOutOfRange: Raised if the given address points to a memory location beyond the bounds of the memory space.
			
	Call
		Opcode: 0x0003
		Mnemonic: call
		Arguments: call <address>
			<address>: An addresing block containing the memory address to call.
		Description: Pushes the current processor state (registers, flags, EIP) onto the Call Stack and then clears the processor state. The given address + ERP is jumped to, and upon a return instruction, the processor state on the top of the call stack is popped back into the current processor state, overwriting it.
		Errors:
			InvalidAddressType: Raised if the given address block does not point to a memory address.
			AddressOutOfRange: Raised if the given address points to a memory location beyond the bounds of the memory space.
			CallStackOverflow: Raised if the Call Stack is full and cannot have values pushed onto it.
	
	Return
		Opcode: 0x0004
		Mnemonic: ret
		Arguments: None
		Description: Used to return from a call instruction. This instruction pops the topmost processor state on the Call Stack into the current processor state.
		Errors:
			CallStackEmpty: Raised if the call stack has no processor states loaded onto it.
			
	Jump if Equal
		Opcode: 0x0005
		Mnemonic: je
		Arguments: je <address>
			<address>: An addressing block containing the memory address to jump to.
		Description: Performs a jump to the specified address + ERP if the equal flag on EFLAGS is set.
		Errors:
			
	Jump if Not Equal
		Opcode: 0x0006
		Mnemonic: jne
		Arguments: jen <address>
			<address>: An addressing block containing the memory address to jump to.
		Description: Performs a jump to the specified address + ERP if the equal flag on EFLAGS is clear.
		Errors:
		
	Jump if Less Than
		Opcode: 0x0007
		Mnemonic: jlt
		Arguments: jlt <address>
			<address>: An addressing block containing the memory address to jump to.
		Description: Performs a jump to the specified address + ERP if the less-than flag on EFLAGS is set.
		Errors:
		
	Jump if Greater Than
		Opcode: 0x0008
		Mnemonic: jgt
		Arguments: jgt <address>
			<address>: An addressing block containing the memory address to jump to.
		Description: Performs a jump to the specified address + ERP if the greater-than flag on EFLAGS is set.
		Errors:
	
	Jump if Less Than or Equal
		Opcode: 0x0009
		Mnemonic: jlte
		Arguments: jlte <address>
			<address>: An addressing block containing the memory address to jump to.
		Description: Performs a jump to the specified address + ERP if the equal flag or the less-than flag on EFLAGS is set.
		Errors:
	
	Jump if Greater Than or Equal
		Opcode: 0x000A
		Mnemonic: jgte
		Arguments: jgte <address>
			<address>: An addressing block containing the memory address to jump to.
		Description: Performs a jump to the specified address + ERP if the equal flag or the greater-than flag on EFLAGS is set.
		Errors:
		
	Absolute Jump
		Opcode: 0x000B
		Mnemonic: jmpa
		Arguments: jmpa <address>
		Description: Performs an absolute jump to an address, that is, a jump to an address to which ERP is not added.
		Errors:
		
	Hardware Call
		Opcode: 0x000C
		Mnemonic: hwcall
		Arguments: hwcall <addressToString>
		Description: Loads a length-prefixed string that contains a hardware command from the given address and performs a hardware call to perform the command.
	
	Stack Argument Prologue
		Opcode: 0x000D
		Mnemonic: stackargs
		Arguments: None
		Description: Indicates that anything pushed onto the stack is going to be an argument to a function call. Calling a function sets EBP equal to ESP to create a new stack frame. Since arguments are pushed on the stack, anything pushed after a stackargs instruction will be placed after EBP.
	
Data Operations
	Move Data
		Opcode: 0x0100
		Mnemonic: mov
		Arguments: <source-addr> <dest-addr>
			<source-addr>: An addressing block containing the value to move.
			<dest-addr>: An addressing block containing the location to move it to.
		Description: Moves a value into a given destination.
		Errors:
			InsufficientDestinationSize: Raised if the destination size is too small for the data.
	
	Move Data with Length
		Opcode: 0x0101
		Mnemonic: movln
		Arguments: <source-addr> <dest-addr> <length>
			<source-addr>: An addressing block containing the value to move.
			<dest-addr>: An addressing block containing the location to move it to.
		Description: Moves a certain length of a value into a given destination
		Errors:
			InsufficientDestinationSize: Raised if the destination size is too small for the data.
			
	Push to Stack
		Opcode: 0x0102
		Mnemonic: push
		Arguments: push <SIZE> <data>
		Description: Depending on the value of SIZE, pushes a BYTE, WORD, DWORD, or QWORD value onto the stack by writing it to the memory pointed to by ESP then adding the size to ESP.
	
	Pop from Stack
		Opcode: 0x0103
		Mnemonic: pop
		Arguments: pop <SIZE> <destination>
		Description: Depending on the value of SIZE, pops a BYTE, WORD, DWORD, or QWORD value off the top of the stack, writing it to the specified destination then subtracting the size from ESP.
	
	Read Array Value
		Opcode: 0x0104
		Mnemonic: arrayread
		Arguments: arrayread SIZE <index>
		Description: Given a pointer to an array at the top of the stack, arrayread reads an array element pointed to by the index, popping the array pointer and pushing the resulting value. The index is zero-based.
	
	Write Array Value
		Opcode: 0x0105
		Mnemonic: arraywrite
		Arguments: arraywrite SIZE <index> <data>
		Description: Given a pointer to an array at the top of the stack, arraywrite writes the given data to the specified index. The array pointer is popped off the top of the stock. The index is zero-based.

Integral/Bitwise Operations
	Stack Addition
		Opcode: 0x0200
		Mnemonic: add
		Arguments: None
		Description: Pops the top two values off the stack, adds them together, and pushes their sum onto the stack.
		Errors:
			ArithmeticOverflow: Raised if the sum is higher than the maximum value of the datatype.
			ArithmeticUnderflow: Raised if the sum is lower than the minimum value of the datatype.
			
	Stack Subtraction
		Opcode: 0x0201
		Mnemonic: sub
		Arguments: None
		Description: Pops the top two values off the stack, subtracts them, and pushes their difference onto the stack.
		Errors:
			ArithmeticOverflow: Raised if the difference is higher than the maximum value of the datatype.
			ArithmeticUnderflow: Raised if the difference is lower than the minimum value of the datatype.
	
	Stack Multiplication
		Opcode: 0x0202
		Mnemonic: mult
		Arguments: None
		Description: Pops the top two values off the stack, multiplies them, and pushes their product onto the stack.
		Errors:
			ArithmeticOverflow: Raised if the product is higher than the maximum value of the datatype.
			ArithmeticUnderflow: Raised if the product is lower than the minimum value of the datatype.
	
	Stack Division
		Opcode: 0x0203
		Mnemonic: div
		Arguments: None
		Description: Pops the top two values off the stack, divides them, and pushes their quotient onto the stack.
		Errors:
			ArithmeticOverflow: Raised if the quotient is higher than the maximum value of the datatype.
			ArithmeticUnderflow: Raised if the quotient is lower than the minimum value of the datatype.
	
	Stack Modulus Division
		Opcode: 0x0204
		Mnemonic: mod
		Arguments: None
		Description: Pops the top two values off the stack, divides them, and pushes the remainder onto the stack.
		Errors:
			ArithmeticOverflow: Raised if the remainder is higher than the maximum value of the datatype.
			ArithmeticUnderflow: Raised if the remainder is lower than the minimum value of the datatype.
			
	Stack Increment
		Opcode: 0x0205
		Mnemonic: inc
		Arguments: None
		Description: Pops the top value off the stack, increments it, and pushes it back onto the stack.
		Errors:
			ArithmeticOverflow: Raised if the value is higher than the maximum value of the datatype.
	
	Stack Decrement
		Opcode: 0x0206
		Mnemonic: dec
		Arguments: None
		Description: Pops the top value off the stack, decrements it, and pushes it back onto the stack.
		Errors:
			ArithmeticUnderflow: Raised if the value is lower than the maximum value of the datatype.
			
	Stack Bitwise AND
		Opcode: 0x0207
		Mnemonic: bwand
		Arguments: None
		Description: Pops the top two values off the stack, performs a bitwise AND on them, and pushes the result onto the stack.
		Errors:
			InvalidBitwiseOperandSize: Raised if the two values are of different sizes.
	
	Stack Bitwise OR
		Opcode: 0x0208
		Mnemonic: bwor
		Arguments: None
		Description: Pops the top two values off the stack, performs a bitwise OR on them, and pushes the result onto the stack.
		Errors:
			InvalidBitwiseOperandSize: Raised if the two values are of different sizes.

	Stack Bitwise XOR
		Opcode: 0x0209
		Mnemonic: bwxor
		Arguments: None
		Description: Pops the top two values off the stack, performs a bitwise XOR on them, and pushes the result onto the stack.
		Errors:
			InvalidBitwiseOperandSize: Raised if the two values are of different sizes.
	
	Stack Bitwise NOT
		Opcode: 0x020A
		Mnemonic: bwnot
		Arguments: None
		Description: Pops the top value off the stack, performs a bitwise NOT on it, and pushes the result onto the stack.
		Errors: None
		
	Stack Bitwise Shift Left
		Opcode: 0x020B
		Mnemonic: lshift
		Arguments: None
		Description: Pops the top two values off the stack, shifts left the second value by the number of bits specified in the first value, and pushes the result on the stack.
		Errors:
			BitwiseShiftPositionsInvalid: Raised if the number of bits to shift is greater than 2,147,483,647 or less than 0.
		
	Stack Bitwise Shift Right
		Opcode: 0x020C
		Mnemonic: rshift
		Arguments: None
		Description: Pops the top two values off the stack, shifts right the second value by the number of bits specified in the first value, and pushes the result on the stack.
		Errors:
			BitwiseShiftPositionsInvalid: Raised if the number of bits to shift is greater than 2,147,483,647 or less than 0.
			
	Stack Logical AND
		Opcode: 0x020D
		Mnemonic: land
		Arguments: None
		Description: Pops the top two values off the stack. If they are both non-zero, the value 1 is pushed onto the stack. Else, the value of 0 is pushed onto the stack.
		Errors: None
	
	Stack Logical OR
		Opcode: 0x020E
		Mnemonic: lor
		Arguments: None
		Description: Pops the top two values off the stack. If either or both of them are non-zero, the value 1 is pushed onto the stack. Else, the value of 0 is pushed onto the stack.
		Errors: None
		
	Stack Logical XOR
		Opcode: 0x020F
		Mnemonic: lxor
		Arguments: None
		Description: Pops the top two values off the stack. If either (but not both) of them are non-zero, the value 1 is pushed onto the stack. Else, the value of 0 is pushed onto the stack.
		Errors: None
		
	Stack Logical NOT
		Opcode: 0x0210
		Mnemonic: lnot
		Arguments: None
		Description: Pops the top value off the stack. If it's nonzero, the value of 0 is pushed onto the stack. Else, the value of 1 is pushed onto the stack.
		Errors: None
		
	Stack Comparison
		Opcode: 0x0211
		Mnemonic: cmp
		Arguments: None
		Description: Pops the top two values off the stack and compares them, setting the equals, less-than, and greater-than flags in EFLAGS accordingly.

	Long Addition
		Opcode: 0x0212
		Mnemonic: addl
		Arguments: addl <source1-address> <source2-address> <dest-address>
			<source1-address>: An addressing block containing the first operand.
			<source2-address>: An addressing block containing the second operand.
			<dest-address>: The addressing block containing the destination of the sum.
		Description: Using the two source address, two values are added and their sum is stored in the destination address.
		Errors:
			ArithmeticOverflow: Raised if the sum is higher than the maximum value of the datatype.
			ArithmeticUnderflow: Raised if the sum is lower than the minimum value of the datatype.
	
	Long Subtraction
		Opcode: 0x0213
		Mnemonic: subl
		Arguments: subl <source1-address> <source2-address> <dest-address>
			<source1-address>: An addressing block containing the first operand.
			<source2-address>: An addressing block containing the second operand.
			<dest-address>: The addressing block containing the destination of the difference.
		Description: Using the two source address, two values are subtracted and their difference is stored in the destination address.
		Errors:
			ArithmeticOverflow: Raised if the difference is higher than the maximum value of the datatype.
			ArithmeticUnderflow: Raised if the difference is lower than the minimum value of the datatype.
	
	Long Multiplication
		Opcode: 0x0214
		Mnemonic: multl
		Arguments: multl <source1-address> <source2-address> <dest-address>
			<source1-address>: An addressing block containing the first operand.
			<source2-address>: An addressing block containing the second operand.
			<dest-address>: The addressing block containing the destination of the product.
		Description: Using the two source address, two values are multiplied and their product is stored in the destination address.
		Errors:
			ArithmeticOverflow: Raised if the product is higher than the maximum value of the datatype.
			ArithmeticUnderflow: Raised if the product is lower than the minimum value of the datatype.
			
	Long Division
		Opcode: 0x0215
		Mnemonic: divl
		Arguments: divl <source1-address> <source2-address> <dest-address>
			<source1-address>: An addressing block containing the first operand.
			<source2-address>: An addressing block containing the second operand.
			<dest-address>: The addressing block containing the destination of the quotient.
		Description: Using the two source address, two values are divided and their quotient is stored in the destination address.
		Errors:
			ArithmeticOverflow: Raised if the quotient is higher than the maximum value of the datatype.
			ArithmeticUnderflow: Raised if the quotient is lower than the minimum value of the datatype.
			
	Long Modulus Division
		Opcode: 0x0216
		Mnemonic: modl
		Arguments: modl <source1-address> <source2-address> <dest-address>
			<source1-address>: An addressing block containing the first operand.
			<source2-address>: An addressing block containing the second operand.
			<dest-address>: The addressing block containing the destination of the remainder.
		Description: Using the two source address, two values are divided and their remainder is stored in the destination address.
		Errors:
			ArithmeticOverflow: Raised if the remainder is higher than the maximum value of the datatype.
			ArithmeticUnderflow: Raised if the remainder is lower than the minimum value of the datatype.
			
	Long Increment
		Opcode: 0x0217
		Mnemonic: incl
		Arguments: incl <source-address> <dest-address>
			<source-address>: An addressing block containing the value to increment.
			<dest-address>: An addressing block containing the place to store the incremented value.
		Description: The value at the source address is incremented and stored in the destination address.
		Errors:
			ArithmeticOverflow: Raised if the value is higher than the maximum value of the datatype.
			
	Long Decrement
		Opcode: 0x0218
		Mnemonic: decl
		Arguments: decl <source-address> <dest-address>
			<source-address>: An addressing block containing the operand.
			<dest-address>: An addressing block containing the place to store the incremented value.
		Description: The value at the source address is decremented and stored in the destination address.
		Errors:
			ArithmeticUnderflow: Raised if the value is lower than the minimum value of the datatype.
			
	Long Bitwise AND
		Opcode: 0x0219
		Mnemonic: bwandl
		Arguments: bwandl <source1-address> <source2-address> <dest-address>
			<source1-address>: An addressing block containing the first operand.
			<source2-address>: An addressing block containing the second operand.
			<dest-address>: The addressing block containing the destination of the result.
		Description: Performs a bitwise AND on the values at the two source addresses and stores the result in the destination address.
		Errors:
			InvalidBitwiseOperandSize: Raised if the two values are of different sizes.
			
	Long Bitwise OR
		Opcode: 0x021A
		Mnemonic: bworl
		Arguments: bworl <source1-address> <source2-address> <dest-address>
			<source1-address>: An addressing block containing the first operand.
			<source2-address>: An addressing block containing the second operand.
			<dest-address>: The addressing block containing the destination of the result.
		Description: Performs a bitwise OR on the values at the two source addresses and stores the result in the destination address.
		Errors:
			InvalidBitwiseOperandSize: Raised if the two values are of different sizes.
			
	Long Bitwise XOR
		Opcode: 0x021B
		Mnemonic: bwxorl
		Arguments: bwxorl <source1-address> <source2-address> <dest-address>
			<source1-address>: An addressing block containing the first operand.
			<source2-address>: An addressing block containing the second operand.
			<dest-address>: The addressing block containing the destination of the result.
		Description: Performs a bitwise XOR on the values at the two source addresses and stores the result in the destination address.
		Errors:
			InvalidBitwiseOperandSize: Raised if the two values are of different sizes.
	
	Long Bitwise NOT
		Opcode: 0x021C
		Mnemonic: bwnotl
		Arguments: bwnotrl <source-address> <dest-address>
			<source-address>: An addressing block containing the operand.
			<dest-address>: An addressing block containing the destination.
		Description: Performs a bitwise NOT on the value at the source address and stores the result in the destination address.
		Errors:
			InvalidBitwiseOperandSize: Raised if the two values are of different sizes.
			
	Long Bitwise Shift Left
		Opcode: 0x021D
		Mnemonic: lshiftl
		Arguments: lshiftl <operand-address> <positions-address> <dest-address>
			<operand-address>: An addressing block containing the operand.
			<positions-address>: An addressing block containing the number of positions to shift the value by.
			<dest-address>: An addressing block containing the destination.
		Description: Shifts left the value at the operand's address by the number of specified positions and stores the result in the destination address.
		Errors:
			BitwiseShiftPositionsInvalid: Raised if the number of bits to shift is greater than 2,147,483,647 or less than 0.
			
	Long Bitwise Shift Right
		Opcode: 0x021E
		Mnemonic: rshiftl
		Arguments: rshiftl <operand-address> <positions-address> <dest-address>
			<operand-address>: An addressing block containing the operand.
			<positions-address>: An addressing block containing the number of positions to shift the value by.
			<dest-address>: An addressing block containing the destination.
		Description: Shifts right the value at the operand's address by the number of specified positions and stores the result in the destination address.
		Errors:
			BitwiseShiftPositionsInvalid: Raised if the number of bits to shift is greater than 2,147,483,647 or less than 0.
			
	Long Logical AND
		Opcode: 0x021F
		Mnemonic: landl
		Arguments: landl <source1-address> <source2-address> <dest-address>
			<source1-address>: An addressing block containing the first operand.
			<source2-address>: An addressing block containing the second operand.
			<dest-address>: The addressing block containing the destination of the result.
		Description: If both of the source values are non-zero, the value of 1 is placed in the destination. Else, the value of 0 is placed in the destination.
		Errors: None
		
	Long Logical OR
		Opcode: 0x0220
		Mnemonic: lorl
		Arguments: lorl <source1-address> <source2-address> <dest-address>
			<source1-address>: An addressing block containing the first operand.
			<source2-address>: An addressing block containing the second operand.
			<dest-address>: The addressing block containing the destination of the result.
		Description: If either or both of the source values are non-zero, the value of 1 is placed in the destination. Else, the value of 0 is placed in the destination.
		Errors: None
		
	Long Logical XOR
		Opcode: 0x0221
		Mnemonic: lxorl
		Arguments: lxorl <source1-address> <source2-address> <dest-address>
			<source1-address>: An addressing block containing the first operand.
			<source2-address>: An addressing block containing the second operand.
			<dest-address>: The addressing block containing the destination of the result.
		Description: If either (but not both) of the source values are non-zero, the value of 1 is placed in the destination. Else, the value of 0 is placed in the destination.
		Errors: None
		
	Long Logical NOT
		Opcode: 0x0222
		Mnemonic: lnotl
		Arguments: lnotl <source-address> <dest-address>
			<source-address>: An addressing block containing the operand.
			<dest-address>: An addressing block containing the destination.
		Description: If the source value is non-zero, the value of 0 is placed in the destination. Else, the value of 1 is placed in the destination.
		Errors: None
		
	Long Comparison
		Opcode: 0x0223
		Mnemonic: cmpl
		Arguments: cmpl <source1-address> <source2-address> <dest-address>
			<source1-address>: An addressing block containing the first operand.
			<source2-address>: An addressing block containing the second operand.
			<dest-address>: The addressing block containing the destination of the result.
		Description: Compares the two source values and stores either -1, 0, or +1 in the destination address.
		Errors:
			ArithmeticUnderflow: Raised if the difference is lower than the minimum value of the datatype.
		
Floating Point Stack Operations
	Floating Stack Addition
		Opcode: 0x0280
	Floating Stack Subtraction
		Opcode: 0x281
	Floating Stack Multiplication
		Opcode: 0x282
	Floating Stack Division
		Opcode: 0x283
	Floating Stack Modulus
		Opcode: 0x284
	Floating Stack Comparison
		Opcode: 0x285
	Floating Stack Square Root
		Opcode: 0x286